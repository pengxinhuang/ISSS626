{
  "hash": "d433587b0676f13fd47f51a5629b7fec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 01a: Geospatial Data Wrangling\"\nformat: html\nexecute:\n  freeze: true      \n  warning: false\n  message: true\n---\n\n## Overview\n\nThis exercise focuses on importing, cleaning, and standardizing geospatial data for Singapore. We will process three spatial datasets (subzones, cycling paths, and pre-schools) and one aspatial dataset (Airbnb listings), ensuring all spatial data uses the SVY21 (EPSG:3414) coordinate reference system.\n\n## Setup and Environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages (including lwgeom for geometry validation)\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\n\npacman::p_load(sf, lwgeom, dplyr, readr, janitor, stringr, here, tmap, ggplot2, units)\n\n# Print session information for reproducibility\ncat(\"R version:\", R.version.string, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version: R version 4.5.0 (2025-04-11 ucrt) \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"sf version:\", as.character(packageVersion(\"sf\")), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf version: 1.0.20 \n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Date: \", as.character(Sys.Date()))\n\n# Define path variables using here::here()\npath_root <- here::here()\npath_ex01 <- here::here(\"Hands-on_Ex\", \"Hands-on_ex01\")\npath_geo <- here::here(\"Hands-on_Ex\", \"Hands-on_ex01\", \"data\", \"geospatial\")\npath_asp <- here::here(\"Hands-on_Ex\", \"Hands-on_ex01\", \"data\", \"aspatial\")\n\n# Display paths for verification\nmessage(\"Project root: \", path_root)\nmessage(\"Exercise 01 path: \", path_ex01)\nmessage(\"Geospatial data path: \", path_geo)\nmessage(\"Aspatial data path: \", path_asp)\n```\n:::\n\n\n## Workflow\n\n### Step 1: Import Geospatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.1 Import MP14_SUBZONE_WEB_PL (Polygon)\nmessage(\"\\n=== Importing Subzone Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Subzone Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\nsubzone_file <- file.path(path_geo, \"MP14_SUBZONE_WEB_PL.shp\")\nif (!file.exists(subzone_file)) {\n  stop(\"MP14_SUBZONE_WEB_PL.shp not found at: \", subzone_file,\n       \"\\nPlease ensure the file is placed in: \", path_geo)\n}\n\nmpsz <- sf::st_read(dsn = path_geo, layer = \"MP14_SUBZONE_WEB_PL\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\HOPE\\Desktop\\ISSS626\\Hands-on_Ex\\Hands-on_ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nsub_crs <- sf::st_crs(mpsz)\nif (is.na(sub_crs$epsg)) {\n  hint <- paste(sub_crs$input, sub_crs$wkt)\n  if (grepl(\"SVY21|Singapore TM|3414\", hint, ignore.case = TRUE)) {\n    message(\"Subzone CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\")\n    mpsz <- sf::st_set_crs(mpsz, 3414)\n  } else {\n    stop(\"Subzone CRS has no EPSG and doesn't look like SVY21. Check the .prj file.\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSubzone CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display basic information\nmessage(\"Subzone data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSubzone data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(mpsz))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 323\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- CRS: \", sf::st_crs(mpsz)$input, \" | EPSG: \", sf::st_crs(mpsz)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CRS: EPSG:3414 | EPSG: 3414\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Geometry type: \", paste(unique(sf::st_geometry_type(mpsz)), collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Geometry type: MULTIPOLYGON\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.2 Import CyclingPathGazette (Line)\nmessage(\"\\n=== Importing Cycling Path Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Cycling Path Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncycling_file <- file.path(path_geo, \"CyclingPath_Aug2025\", \"CyclingPathGazette.shp\")\nif (!file.exists(cycling_file)) {\n  stop(\"CyclingPathGazette.shp not found at: \", cycling_file,\n       \"\\nPlease ensure the file is placed in: \", file.path(path_geo, \"CyclingPath_Aug2025\"))\n}\n\ncycling_path <- sf::st_read(cycling_file, quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\HOPE\\Desktop\\ISSS626\\Hands-on_Ex\\Hands-on_ex01\\data\\geospatial\\CyclingPath_Aug2025\\CyclingPathGazette.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4674 features and 7 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\ncy_crs <- sf::st_crs(cycling_path)\nif (is.na(cy_crs$epsg)) {\n  hint <- paste(cy_crs$input, cy_crs$wkt)\n  if (grepl(\"SVY21|Singapore TM|3414\", hint, ignore.case = TRUE)) {\n    message(\"Cycling Path CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\")\n    cycling_path <- sf::st_set_crs(cycling_path, 3414)\n  } else {\n    stop(\"Cycling Path CRS has no EPSG and doesn't look like SVY21. Check the .prj file.\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCycling Path CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display basic information\nmessage(\"Cycling path data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCycling path data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(cycling_path))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 4674\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- CRS: \", sf::st_crs(cycling_path)$input, \" | EPSG: \", sf::st_crs(cycling_path)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CRS: EPSG:3414 | EPSG: 3414\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Geometry type: \", paste(unique(sf::st_geometry_type(cycling_path)), collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Geometry type: MULTILINESTRING\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.3 Import PreSchoolsLocation (Point)\nmessage(\"\\n=== Importing Pre-Schools Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Pre-Schools Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\npreschool_file <- file.path(path_geo, \"PreSchoolsLocation.kml\")\nif (!file.exists(preschool_file)) {\n  stop(\"PreSchoolsLocation.kml not found at: \", preschool_file,\n       \"\\nPlease ensure the file is placed in: \", path_geo)\n}\n\npreschools <- st_read(preschool_file, quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\HOPE\\Desktop\\ISSS626\\Hands-on_Ex\\Hands-on_ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display basic information before transformation\nmessage(\"Pre-schools data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPre-schools data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(preschools))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 2290\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Original CRS EPSG: \", st_crs(preschools)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Original CRS EPSG: 4326\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Geometry type: \", unique(st_geometry_type(preschools)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Geometry type: POINT\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.4 Import listings.csv (Aspatial)\nmessage(\"\\n=== Importing Airbnb Listings Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Airbnb Listings Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\nlistings_file <- file.path(path_asp, \"listings.csv\")\nif (!file.exists(listings_file)) {\n  stop(\"listings.csv not found at: \", listings_file,\n       \"\\nPlease ensure the file is placed in: \", path_asp)\n}\n\nlistings <- read_csv(listings_file, show_col_types = FALSE)\n\n# Verify required columns exist\nif (!all(c(\"latitude\", \"longitude\") %in% names(listings))) {\n  stop(\"listings.csv must contain 'latitude' and 'longitude' columns\")\n}\n\nmessage(\"Listings data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nListings data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(listings))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 3659\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Columns: \", ncol(listings))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Columns: 79\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Latitude/Longitude columns: VERIFIED\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Latitude/Longitude columns: VERIFIED\n```\n\n\n:::\n:::\n\n\n### Step 2: Exploratory Data Inspection (Ch. 1.5–1.6)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Inspecting Subzone Data Structure ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Inspecting Subzone Data Structure ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# Geometry column summary and CRS bbox overview\nprint(st_geometry(mpsz))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_bbox(mpsz))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Attribute glimpse and sample records\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(mpsz, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28160.23 ymin: 28369.47 xmax: 32362.39 ymax: 30247.18\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO    SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N PLN_AREA_C\n1        1          1 MARINA SOUTH    MSSZ01      Y    MARINA SOUTH         MS\n2        2          1 PEARL'S HILL    OTSZ01      Y          OUTRAM         OT\n3        3          3    BOAT QUAY    SRSZ03      Y SINGAPORE RIVER         SR\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84 29220.19\n2 CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06 29782.05\n3 CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96 29974.66\n  SHAPE_Leng SHAPE_Area                       geometry\n1   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Inspecting Cycling Path Data Structure ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Inspecting Cycling Path Data Structure ===\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_geometry(cycling_path))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 4674 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTILINESTRING ((40128.23 37076.74, 40130.44 3...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTILINESTRING ((35123.93 42970.72, 35121.12 4...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTILINESTRING ((35088.86 42820.93, 35089.18 4...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTILINESTRING ((35099.12 42871.11, 35097.69 4...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTILINESTRING ((16031.65 36921.59, 16035.79 3...\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_bbox(cycling_path))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    xmin     ymin     xmax     ymax \n11721.10 27550.13 42809.37 49702.59 \n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(cycling_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4,674\nColumns: 8\n$ RD_CD      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PLANNING_A <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PATH_OWNER <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ SHAPE_LEN  <dbl> 18.732594, 94.469928, 9.169593, 51.320348, 29.886054, 38.38…\n$ PLANNING_1 <chr> \"TAMPINES\", \"PUNGGOL\", \"PUNGGOL\", \"PUNGGOL\", \"JURONG WEST\",…\n$ RD_CD_DESC <chr> \"TAMPINES AVENUE 4\", \"PUNGGOL FIELD\", \"PUNGGOL FIELD\", \"PUN…\n$ PATH_OWN_1 <chr> \"Land Transport Authority\", \"Land Transport Authority\", \"La…\n$ geometry   <MULTILINESTRING [m]> MULTILINESTRING ((40128.23 ..., MULTILINEST…\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(cycling_path, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 7 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 35088.86 ymin: 37076.69 xmax: 40146.92 ymax: 42970.72\nProjected CRS: SVY21 / Singapore TM\n  RD_CD PLANNING_A PATH_OWNER SHAPE_LEN PLANNING_1        RD_CD_DESC\n1  <NA>       <NA>       <NA> 18.732594   TAMPINES TAMPINES AVENUE 4\n2  <NA>       <NA>       <NA> 94.469928    PUNGGOL     PUNGGOL FIELD\n3  <NA>       <NA>       <NA>  9.169593    PUNGGOL     PUNGGOL FIELD\n                PATH_OWN_1                       geometry\n1 Land Transport Authority MULTILINESTRING ((40128.23 ...\n2 Land Transport Authority MULTILINESTRING ((35123.93 ...\n3 Land Transport Authority MULTILINESTRING ((35088.86 ...\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Inspecting Pre-School Data Structure ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Inspecting Pre-School Data Structure ===\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_geometry(preschools))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (103.8072 1.299333 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (103.826 1.312839 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (103.8409 1.348843 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (103.8048 1.435024 0)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPOINT Z (103.839 1.33315 0)\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(st_bbox(preschools))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      xmin       ymin       xmax       ymax \n103.687842   1.247759 103.989707   1.462134 \n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(preschools)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,290\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <POINT [°]> POINT Z (103.8072 1.299333 0), POINT Z (103.826 1.31…\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(preschools, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.8072 ymin: 1.299333 xmax: 103.8409 ymax: 1.348843\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n                                                                                                                                                                                                                                                                                                                                                                                          Description\n1     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDREN'S COVE PRESCHOOL PTE.LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9390</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>498CC9FE48CC94D4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n2              <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDREN'S COVE PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT8675</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>22877550804213FD</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n3 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CHILDREN'S VINEYARD PRESCHOOL PTE. LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9308</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>B2FE90E44AD494E3</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20211201093631</td> </tr></table></center>\n                       geometry\n1 POINT Z (103.8072 1.299333 0)\n2  POINT Z (103.826 1.312839 0)\n3 POINT Z (103.8409 1.348843 0)\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Quick Look Plots (Chapter 1.6) ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Quick Look Plots (Chapter 1.6) ===\n```\n\n\n:::\n\n```{.r .cell-code}\nop <- par(mfrow = c(2, 2))\nplot(mpsz, main = \"MPSZ Subzones\")\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/exploratory-plots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(st_geometry(mpsz), main = \"Subzone Geometry Only\")\nif (\"PLN_AREA_N\" %in% names(mpsz)) {\n  plot(mpsz[\"PLN_AREA_N\"], main = \"Planning Area Names\")\n} else if (\"pln_area_n\" %in% names(mpsz)) {\n  plot(mpsz[\"pln_area_n\"], main = \"Planning Area Names\")\n} else {\n  plot(st_geometry(mpsz), main = \"Planning Area Names\")\n}\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/exploratory-plots-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(st_geometry(mpsz), main = \"Subzones with Pre-Schools\")\nplot(st_geometry(preschools), add = TRUE, col = \"red\", pch = 20)\npar(op)\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/exploratory-plots-3.png){width=672}\n:::\n:::\n\n\n### Step 3: Converting Aspatial Data to sf (Ch. 1.8.2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Converting Airbnb Listings to sf ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Converting Airbnb Listings to sf ===\n```\n\n\n:::\n\n```{.r .cell-code}\nlistings_sf <- listings %>%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326, remove = FALSE) %>%\n  st_transform(3414)\n\nmessage(\"Listings converted to sf with CRS EPSG:\", st_crs(listings_sf)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nListings converted to sf with CRS EPSG:3414\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,659\nColumns: 80\n$ id                                           <dbl> 71609, 71896, 71903, 2753…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.025063e+13, 2.025063e+1…\n$ last_scraped                                 <date> 2025-06-26, 2025-06-27, …\n$ source                                       <chr> \"city scrape\", \"previous …\n$ name                                         <chr> \"Ensuite Room (Room 1 & 2…\n$ description                                  <chr> \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        <chr> NA, NA, \"Quiet and view o…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 367042, 367042, 367042, 1…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2011-01-29, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"Hi My name is Belinda -H…\n$ host_response_time                           <chr> \"within an hour\", \"within…\n$ host_response_rate                           <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          <dbl> 5, 5, 5, 59, 59, 7, 59, 5…\n$ host_total_listings_count                    <dbl> 10, 10, 10, 88, 88, 8, 88…\n$ host_verifications                           <chr> \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       <chr> \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 <chr> \"East Region\", \"East Regi…\n$ latitude                                     <dbl> 1.34537, 1.34754, 1.34531…\n$ longitude                                    <dbl> 103.9589, 103.9596, 103.9…\n$ property_type                                <chr> \"Private room in villa\", …\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 2, 1, 2, 1, 1, 2, 1, 1, 1…\n$ bathrooms                                    <dbl> 1.0, NA, 0.5, NA, NA, 1.0…\n$ bathrooms_text                               <chr> \"1 private bath\", \"Shared…\n$ bedrooms                                     <dbl> 2, NA, 1, NA, NA, 2, NA, …\n$ beds                                         <dbl> 3, NA, 2, NA, NA, 1, NA, …\n$ amenities                                    <chr> \"[\\\"Shampoo\\\", \\\"Fire pit…\n$ price                                        <chr> \"$143.00\", NA, \"$76.00\", …\n$ minimum_nights                               <dbl> 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               <dbl> 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 30, 20, 30, 0, 0, 30, 0, …\n$ availability_60                              <dbl> 60, 49, 60, 24, 25, 60, 2…\n$ availability_90                              <dbl> 90, 79, 90, 54, 55, 90, 5…\n$ availability_365                             <dbl> 90, 79, 90, 153, 153, 365…\n$ calendar_last_scraped                        <date> 2025-06-26, 2025-06-27, …\n$ number_of_reviews                            <dbl> 19, 24, 46, 20, 16, 131, …\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ availability_eoy                             <dbl> 90, 79, 90, 153, 153, 185…\n$ number_of_reviews_ly                         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ estimated_occupancy_l365d                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ estimated_revenue_l365d                      <dbl> 0, NA, 0, NA, NA, 0, NA, …\n$ first_review                                 <date> 2011-12-19, 2011-07-30, …\n$ last_review                                  <date> 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         <dbl> 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       <dbl> 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    <dbl> 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        <dbl> 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  <dbl> 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       <dbl> 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          <dbl> 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      <chr> NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             <lgl> FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               <dbl> 5, 5, 5, 58, 58, 7, 58, 5…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ calculated_host_listings_count_private_rooms <dbl> 5, 5, 5, 58, 58, 6, 58, 5…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.12, 0.14, 0.27, 0.13, 0…\n$ geometry                                     <POINT [m]> POINT (41972.5 3639…\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(head(listings_sf, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 79 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 41972.5 ymin: 36383.43 xmax: 42209.55 ymax: 36630.01\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 3 × 80\n     id listing_url              scrape_id last_scraped source name  description\n  <dbl> <chr>                        <dbl> <date>       <chr>  <chr> <chr>      \n1 71609 https://www.airbnb.com/…   2.03e13 2025-06-26   city … Ensu… For 3 room…\n2 71896 https://www.airbnb.com/…   2.03e13 2025-06-27   previ… B&B … <NA>       \n3 71903 https://www.airbnb.com/…   2.03e13 2025-06-27   city … Room… Like your …\n# ℹ 73 more variables: neighborhood_overview <chr>, picture_url <chr>,\n#   host_id <dbl>, host_url <chr>, host_name <chr>, host_since <date>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <lgl>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <dbl>,\n#   host_total_listings_count <dbl>, host_verifications <chr>, …\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== DIY Map: Airbnb Listings over Subzones ===\")\n\nold_tmap_mode <- tmap_mode(\"plot\")\n\ntmap::tm_shape(mpsz) +\n  tmap::tm_polygons(col = \"grey90\", border.col = \"grey60\") +\n  tmap::tm_shape(listings_sf) +\n  tmap::tm_symbols(col = \"tomato\", size = 0.03, alpha = 0.5) +\n  tmap::tm_layout(\n    title = \"Airbnb Listings across Singapore Subzones\",\n    legend.show = FALSE,\n    frame = FALSE\n  )\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/listings-map-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode(old_tmap_mode)\n```\n:::\n\n\n### Step 4: Coordinate System Transformation and Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== CRS Transformation and Validation ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== CRS Transformation and Validation ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define target CRS\ncrs_target <- sf::st_crs(3414)\n\n# Transform Pre-Schools from WGS84 (4326) to SVY21 (3414)\nif (st_crs(preschools)$epsg == 4326) {\n  message(\"Transforming Pre-Schools from EPSG:4326 to EPSG:3414...\")\n  preschools <- st_transform(preschools, crs = crs_target)\n  message(\"Transformation completed\")\n} else if (st_crs(preschools) != crs_target) {\n  stop(\"Unexpected CRS for Pre-Schools. Expected 4326 or 3414, got: \", \n       st_crs(preschools)$epsg)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTransforming Pre-Schools from EPSG:4326 to EPSG:3414...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTransformation completed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Handle potential GEOMETRYCOLLECTION from KML\nif (any(st_geometry_type(preschools) == \"GEOMETRYCOLLECTION\")) {\n  message(\"Extracting POINT geometries from GEOMETRYCOLLECTION...\")\n  preschools <- st_collection_extract(preschools, \"POINT\")\n}\n\n# Verify all spatial data is in EPSG:3414\nmessage(\"\\nVerifying CRS consistency...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nVerifying CRS consistency...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Assert CRS for all spatial datasets using object comparison\nif (st_crs(mpsz) != crs_target) {\n  stop(\"Subzone CRS is not EPSG:3414. Current CRS: \", st_crs(mpsz)$input)\n}\n\nif (st_crs(cycling_path) != crs_target) {\n  stop(\"Cycling Path CRS is not EPSG:3414. Current CRS: \", st_crs(cycling_path)$input)\n}\n\nif (st_crs(preschools) != crs_target) {\n  stop(\"Pre-Schools CRS is not EPSG:3414 after transform. Current CRS: \", st_crs(preschools)$input)\n}\n\nmessage(\"✓ All spatial datasets are in EPSG:3414 (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All spatial datasets are in EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Verify geometry types\nmessage(\"\\nVerifying geometry types...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nVerifying geometry types...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check subzone geometry\nsubzone_geom <- unique(st_geometry_type(mpsz))\nif (!all(subzone_geom %in% c(\"POLYGON\", \"MULTIPOLYGON\"))) {\n  stop(\"Subzone should be POLYGON or MULTIPOLYGON, got: \", paste(subzone_geom, collapse=\", \"))\n}\n\n# Check cycling path geometry  \ncycling_geom <- unique(st_geometry_type(cycling_path))\nif (!all(cycling_geom %in% c(\"LINESTRING\", \"MULTILINESTRING\"))) {\n  stop(\"Cycling Path should be LINESTRING or MULTILINESTRING, got: \", paste(cycling_geom, collapse=\", \"))\n}\n\n# Check preschools geometry\npreschool_geom <- unique(st_geometry_type(preschools))\nif (!all(preschool_geom %in% c(\"POINT\"))) {\n  stop(\"Pre-Schools should be POINT, got: \", paste(preschool_geom, collapse=\", \"))\n}\n\nmessage(\"✓ All geometry types verified\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All geometry types verified\n```\n\n\n:::\n:::\n\n\n### Step 5: Data Cleaning and Standardization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Data Cleaning and Standardization ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Data Cleaning and Standardization ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3.1 Clean column names (snake_case)\nmessage(\"Standardizing column names to snake_case...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStandardizing column names to snake_case...\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz <- mpsz %>% janitor::clean_names()\ncycling_path <- cycling_path %>% janitor::clean_names()\npreschools <- preschools %>% janitor::clean_names()\n\n# 3.2 Select and retain key fields\nmessage(\"Selecting key fields...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSelecting key fields...\n```\n\n\n:::\n\n```{.r .cell-code}\n# For subzone: retain subzone_n and pln_area_n\nif (all(c(\"subzone_n\", \"pln_area_n\") %in% names(mpsz))) {\n  mpsz_clean <- mpsz %>%\n    select(subzone_n, pln_area_n, geometry)\n} else {\n  message(\"Note: Expected fields 'subzone_n' or 'pln_area_n' not found. Retaining all fields.\")\n  mpsz_clean <- mpsz\n}\n\n# For cycling path: retain basic identification fields\ncycling_clean <- cycling_path %>%\n  select(any_of(c(\"objectid\", \"name\", \"type\", \"status\")), geometry)\n\n# For preschools: retain name field\nif (\"name\" %in% names(preschools)) {\n  preschools_clean <- preschools %>%\n    select(name, geometry)\n} else {\n  message(\"Note: 'name' field not found in Pre-Schools. Retaining all fields.\")\n  preschools_clean <- preschools\n}\n\n# 3.3 Remove empty geometries\nmessage(\"Checking for empty geometries...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChecking for empty geometries...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check and remove empty geometries\nn_empty_mpsz <- sum(st_is_empty(mpsz_clean))\nn_empty_cycling <- sum(st_is_empty(cycling_clean))\nn_empty_preschools <- sum(st_is_empty(preschools_clean))\n\nif (n_empty_mpsz > 0) {\n  message(\"Removing \", n_empty_mpsz, \" empty geometries from subzone data\")\n  mpsz_clean <- mpsz_clean[!st_is_empty(mpsz_clean), ]\n}\n\nif (n_empty_cycling > 0) {\n  message(\"Removing \", n_empty_cycling, \" empty geometries from cycling path data\")\n  cycling_clean <- cycling_clean[!st_is_empty(cycling_clean), ]\n}\n\nif (n_empty_preschools > 0) {\n  message(\"Removing \", n_empty_preschools, \" empty geometries from preschools data\")\n  preschools_clean <- preschools_clean[!st_is_empty(preschools_clean), ]\n}\n\nmessage(\"✓ Data cleaning completed\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ Data cleaning completed\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3.4 Make geometries valid if needed\nmessage(\"Validating geometries...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating geometries...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check and fix invalid geometries\nif (any(!st_is_valid(mpsz_clean))) {\n  message(\"Fixing invalid geometries in subzone data...\")\n  mpsz_clean <- st_make_valid(mpsz_clean)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFixing invalid geometries in subzone data...\n```\n\n\n:::\n\n```{.r .cell-code}\nif (any(!st_is_valid(cycling_clean))) {\n  message(\"Fixing invalid geometries in cycling path data...\")\n  cycling_clean <- st_make_valid(cycling_clean)\n}\n\nif (any(!st_is_valid(preschools_clean))) {\n  message(\"Fixing invalid geometries in preschools data...\")\n  preschools_clean <- st_make_valid(preschools_clean)\n}\n\nmessage(\"✓ All geometries are valid\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All geometries are valid\n```\n\n\n:::\n:::\n\n\n### Step 6: Export Clean Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Exporting Clean Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Exporting Clean Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define output file paths\nsubzone_out <- file.path(path_geo, \"clean_subzone.gpkg\")\ncycling_out <- file.path(path_geo, \"clean_cycling_path.gpkg\")\npreschools_out <- file.path(path_geo, \"clean_preschools_svy21.gpkg\")\n\n# Remove existing files to avoid multiple layers\nif (file.exists(subzone_out)) {\n  message(\"Removing existing clean_subzone.gpkg\")\n  file.remove(subzone_out)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRemoving existing clean_subzone.gpkg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nif (file.exists(cycling_out)) {\n  message(\"Removing existing clean_cycling_path.gpkg\")\n  file.remove(cycling_out)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRemoving existing clean_cycling_path.gpkg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nif (file.exists(preschools_out)) {\n  message(\"Removing existing clean_preschools_svy21.gpkg\")\n  file.remove(preschools_out)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRemoving existing clean_preschools_svy21.gpkg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Export to GeoPackage\nmessage(\"Writing clean data to GeoPackage files...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWriting clean data to GeoPackage files...\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(mpsz_clean, subzone_out, layer = \"subzone\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWriting layer `subzone' to data source \n  `C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_subzone.gpkg' using driver `GPKG'\nWriting 323 features with 2 fields and geometry type Unknown (any).\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(cycling_clean, cycling_out, layer = \"cycling_path\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWriting layer `cycling_path' to data source \n  `C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_cycling_path.gpkg' using driver `GPKG'\nWriting 4674 features with 0 fields and geometry type Multi Line String.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(preschools_clean, preschools_out, layer = \"preschools\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWriting layer `preschools' to data source \n  `C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_preschools_svy21.gpkg' using driver `GPKG'\nWriting 2290 features with 1 fields and geometry type 3D Point.\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\n✓ All clean data exported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n✓ All clean data exported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Output files:\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nOutput files:\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- \", subzone_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_subzone.gpkg\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- \", cycling_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_cycling_path.gpkg\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- \", preschools_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_preschools_svy21.gpkg\n```\n\n\n:::\n:::\n\n\n### Step 7: Geospatial Processing Examples (Ch. 1.9)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Cycling Path Buffer and Area Calculations ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Cycling Path Buffer and Area Calculations ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# Create 5 metre buffer around cleaned cycling paths (per feature)\ncycling_buffer <- cycling_clean %>%\n  st_buffer(dist = 5) %>%\n  mutate(\n    buffer_area_sqm = st_area(.),\n    buffer_area_sqkm = set_units(buffer_area_sqm, \"km^2\")\n  )\n\ntotal_buffer_area <- sum(cycling_buffer$buffer_area_sqkm)\nmessage(\n  \"Total buffered cycling corridor area (5 m): \",\n  signif(as.numeric(total_buffer_area), 4),\n  \" sq km\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTotal buffered cycling corridor area (5 m): 3.56 sq km\n```\n\n\n:::\n\n```{.r .cell-code}\n# Intersect buffer with Tampines West subzone (if available)\ntampines_west <- mpsz_clean %>%\n  filter(\n    toupper(pln_area_n) == \"TAMPINES\",\n    toupper(subzone_n) == \"TAMPINES WEST\"\n  )\n\nif (nrow(tampines_west) == 0) {\n  message(\"Tampines West subzone not found – selecting first available subzone instead.\")\n  tampines_west <- mpsz_clean[1, ]\n}\n\ntampines_buffer <- st_intersection(st_make_valid(tampines_west), st_union(cycling_buffer))\n\nif (nrow(tampines_buffer) > 0) {\n  tampines_area <- set_units(st_area(tampines_buffer), \"km^2\")\n  message(\n    \"Buffered cycling area within selected subzone: \",\n    signif(as.numeric(tampines_area), 4),\n    \" sq km\"\n  )\n} else {\n  message(\"No buffered cycling segments found within the selected subzone.\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBuffered cycling area within selected subzone: 0.09913 sq km\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Visualising Cycling Buffer in Tampines West ===\")\n\nold_tmap_mode <- tmap_mode(\"plot\")\n\nif (nrow(tampines_buffer) > 0) {\n  tmap::tm_shape(tampines_west) +\n    tmap::tm_polygons(col = \"#f0f4ff\", border.col = \"#26456e\") +\n    tmap::tm_shape(tampines_buffer) +\n    tmap::tm_fill(col = \"#ffb347\", alpha = 0.6) +\n    tmap::tm_layout(\n      title = \"5 m Cycling Corridor Buffer in Tampines West\",\n      legend.show = FALSE,\n      frame = FALSE\n    )\n} else {\n  message(\"Skipping map because no buffered cycling segments were found in the selected subzone.\")\n}\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/tampines-buffer-map-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode(old_tmap_mode)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count pre-schools per subzone\nmessage(\"\\n=== Preschool Counts by Subzone ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Preschool Counts by Subzone ===\n```\n\n\n:::\n\n```{.r .cell-code}\nsubzone_preschool <- mpsz_clean %>%\n  dplyr::mutate(\n    subzone_area_sqkm = as.numeric(units::set_units(sf::st_area(.), \"km^2\")),\n    preschool_count   = lengths(sf::st_intersects(., preschools_clean)),\n    preschool_density = preschool_count / subzone_area_sqkm\n  )\n\nsubzone_summary <- subzone_preschool %>%\n  sf::st_drop_geometry() %>%\n  dplyr::transmute(\n    subzone_n,\n    planning_area      = pln_area_n,\n    subzone_area_sqkm,\n    preschool_count,\n    preschool_density\n  )\n\nprint(head(subzone_summary, 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       subzone_n   planning_area subzone_area_sqkm preschool_count\n1   MARINA SOUTH    MARINA SOUTH         1.6303793               0\n2   PEARL'S HILL          OUTRAM         0.5598162               6\n3      BOAT QUAY SINGAPORE RIVER         0.1608075               0\n4 HENDERSON HILL     BUKIT MERAH         0.5954289               5\n5        REDHILL     BUKIT MERAH         0.3874294               3\n  preschool_density\n1          0.000000\n2         10.717803\n3          0.000000\n4          8.397308\n5          7.743345\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\nSummary of preschool density (counts per sq km):\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nSummary of preschool density (counts per sq km):\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(summary(subzone_summary$preschool_density))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   5.154   6.449  10.908  35.602 \n```\n\n\n:::\n\n```{.r .cell-code}\ntop_subzone <- subzone_summary %>%\n  dplyr::arrange(dplyr::desc(preschool_count)) %>%\n  dplyr::slice_head(n = 1)\n\nmessage(\"\\nSubzone with the highest preschool count:\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nSubzone with the highest preschool count:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(top_subzone)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      subzone_n planning_area subzone_area_sqkm preschool_count\n1 TAMPINES EAST      TAMPINES          4.339824              72\n  preschool_density\n1          16.59053\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_hist <- ggplot(subzone_summary, aes(x = preschool_density)) +\n  geom_histogram(fill = \"#74a9cf\", colour = \"white\", bins = 20) +\n  labs(\n    x = \"Preschool Density (count per sq km)\",\n    y = \"Number of Subzones\",\n    title = \"Distribution of Preschool Density across Subzones\"\n  ) +\n  theme_minimal()\np_hist\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/preschool-hist-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_scatter <- ggplot(subzone_summary, aes(x = preschool_count, y = preschool_density)) +\n  geom_point(alpha = 0.6, colour = \"#2b8cbe\") +\n  labs(\n    x = \"Preschool Count\",\n    y = \"Preschool Density (count per sq km)\",\n    title = \"Preschool Density vs. Count\"\n  ) +\n  theme_minimal()\np_scatter\n```\n\n::: {.cell-output-display}\n![](ex01a_files/figure-html/preschool-scatter-1.png){width=672}\n:::\n:::\n\n\n## Results\n\n### Data Summary\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n\", strrep(\"=\", 60), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n============================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"DATA PROCESSING SUMMARY\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nDATA PROCESSING SUMMARY\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(strrep(\"=\", 60), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n============================================================\n```\n\n\n:::\n\n```{.r .cell-code}\n# Subzone Summary\nmessage(\"1. SUBZONE DATA (clean_subzone.gpkg)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n1. SUBZONE DATA (clean_subzone.gpkg)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(mpsz_clean))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 323\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", sf::st_crs(mpsz_clean)$epsg, \" (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry types: \", paste(unique(sf::st_geometry_type(mpsz_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry types: POLYGON, MULTIPOLYGON\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Fields: \", paste(names(sf::st_drop_geometry(mpsz_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Fields: subzone_n, pln_area_n\n```\n\n\n:::\n\n```{.r .cell-code}\n# Cycling Path Summary\nmessage(\"\\n2. CYCLING PATH DATA (clean_cycling_path.gpkg)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n2. CYCLING PATH DATA (clean_cycling_path.gpkg)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(cycling_clean))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 4674\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", sf::st_crs(cycling_clean)$epsg, \" (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry types: \", paste(unique(sf::st_geometry_type(cycling_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry types: MULTILINESTRING\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Fields: \", paste(names(sf::st_drop_geometry(cycling_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Fields: \n```\n\n\n:::\n\n```{.r .cell-code}\n# Pre-Schools Summary\nmessage(\"\\n3. PRE-SCHOOLS DATA (clean_preschools_svy21.gpkg)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n3. PRE-SCHOOLS DATA (clean_preschools_svy21.gpkg)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(preschools_clean))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 2290\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", sf::st_crs(preschools_clean)$epsg, \" (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry types: \", paste(unique(sf::st_geometry_type(preschools_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry types: POINT\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Fields: \", paste(names(sf::st_drop_geometry(preschools_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Fields: name\n```\n\n\n:::\n\n```{.r .cell-code}\n# Listings Summary\nmessage(\"\\n4. LISTINGS DATA (listings.csv - read only)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n4. LISTINGS DATA (listings.csv - read only)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(listings))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 3659\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Latitude range: [\", round(min(listings$latitude), 4), \", \",\n        round(max(listings$latitude), 4), \"]\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Latitude range: [1.2227, 1.4578]\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Longitude range: [\", round(min(listings$longitude), 4), \", \",\n        round(max(listings$longitude), 4), \"]\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Longitude range: [103.6346, 103.9896]\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\n5. LISTINGS DATA (listings_sf - transformed)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n5. LISTINGS DATA (listings_sf - transformed)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(listings_sf))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 3659\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", sf::st_crs(listings_sf)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry type: \", unique(sf::st_geometry_type(listings_sf)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry type: POINT\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\n\", strrep(\"=\", 60))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n============================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"✓ All data processing completed successfully!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All data processing completed successfully!\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(strrep(\"=\", 60))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n============================================================\n```\n\n\n:::\n:::\n\n\n### Sample Data Preview\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview first 3 records without geometry\nmessage(\"\\nSample records from cleaned datasets:\")\n\nmessage(\"\\nSubzone (first 3 records):\")\nprint(head(sf::st_drop_geometry(mpsz_clean), 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     subzone_n      pln_area_n\n1 MARINA SOUTH    MARINA SOUTH\n2 PEARL'S HILL          OUTRAM\n3    BOAT QUAY SINGAPORE RIVER\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\nCycling Path (first 3 records):\")\nprint(head(sf::st_drop_geometry(cycling_clean), 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndata frame with 0 columns and 3 rows\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\nPre-Schools (first 3 records):\")\nprint(head(sf::st_drop_geometry(preschools_clean), 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name\n1 kml_1\n2 kml_2\n3 kml_3\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "ex01a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}