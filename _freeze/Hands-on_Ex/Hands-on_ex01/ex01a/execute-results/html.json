{
  "hash": "aaefd5eac9a560cde552141c6d4e4d74",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 01a: Geospatial Data Wrangling\"\nformat: html\nexecute:\n  freeze: true      \n  warning: false\n  message: true\n---\n\n## Overview\n\nThis exercise focuses on importing, cleaning, and standardizing geospatial data for Singapore. We will process three spatial datasets (subzones, cycling paths, and pre-schools) and one aspatial dataset (Airbnb listings), ensuring all spatial data uses the SVY21 (EPSG:3414) coordinate reference system.\n\n## Setup and Environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages (including lwgeom for geometry validation)\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\n\npacman::p_load(sf, lwgeom, dplyr, readr, janitor, stringr, here)\n\n# Print session information for reproducibility\ncat(\"R version:\", R.version.string, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version: R version 4.5.0 (2025-04-11 ucrt) \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"sf version:\", as.character(packageVersion(\"sf\")), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nsf version: 1.0.20 \n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Date: \", as.character(Sys.Date()))\n\n# Define path variables using here::here()\npath_root <- here::here()\npath_ex01 <- here::here(\"Hands-on_Ex\", \"Hands-on_ex01\")\npath_geo <- here::here(\"Hands-on_Ex\", \"Hands-on_ex01\", \"data\", \"geospatial\")\npath_asp <- here::here(\"Hands-on_Ex\", \"Hands-on_ex01\", \"data\", \"aspatial\")\n\n# Display paths for verification\nmessage(\"Project root: \", path_root)\nmessage(\"Exercise 01 path: \", path_ex01)\nmessage(\"Geospatial data path: \", path_geo)\nmessage(\"Aspatial data path: \", path_asp)\n```\n:::\n\n\n## Workflow\n\n### Step 1: Import Geospatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.1 Import MP14_SUBZONE_WEB_PL (Polygon)\nmessage(\"\\n=== Importing Subzone Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Subzone Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\nsubzone_file <- file.path(path_geo, \"MP14_SUBZONE_WEB_PL.shp\")\nif (!file.exists(subzone_file)) {\n  stop(\"MP14_SUBZONE_WEB_PL.shp not found at: \", subzone_file,\n       \"\\nPlease ensure the file is placed in: \", path_geo)\n}\n\nmpsz <- sf::st_read(dsn = path_geo, layer = \"MP14_SUBZONE_WEB_PL\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\HOPE\\Desktop\\ISSS626\\Hands-on_Ex\\Hands-on_ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nsub_crs <- sf::st_crs(mpsz)\nif (is.na(sub_crs$epsg)) {\n  hint <- paste(sub_crs$input, sub_crs$wkt)\n  if (grepl(\"SVY21|Singapore TM|3414\", hint, ignore.case = TRUE)) {\n    message(\"Subzone CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\")\n    mpsz <- sf::st_set_crs(mpsz, 3414)\n  } else {\n    stop(\"Subzone CRS has no EPSG and doesn't look like SVY21. Check the .prj file.\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSubzone CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display basic information\nmessage(\"Subzone data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSubzone data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(mpsz))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 323\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- CRS: \", sf::st_crs(mpsz)$input, \" | EPSG: \", sf::st_crs(mpsz)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CRS: EPSG:3414 | EPSG: 3414\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Geometry type: \", paste(unique(sf::st_geometry_type(mpsz)), collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Geometry type: MULTIPOLYGON\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.2 Import CyclingPathGazette (Line)\nmessage(\"\\n=== Importing Cycling Path Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Cycling Path Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\ncycling_file <- file.path(path_geo, \"CyclingPath_Aug2025\", \"CyclingPathGazette.shp\")\nif (!file.exists(cycling_file)) {\n  stop(\"CyclingPathGazette.shp not found at: \", cycling_file,\n       \"\\nPlease ensure the file is placed in: \", file.path(path_geo, \"CyclingPath_Aug2025\"))\n}\n\ncycling_path <- sf::st_read(cycling_file, quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\Users\\HOPE\\Desktop\\ISSS626\\Hands-on_Ex\\Hands-on_ex01\\data\\geospatial\\CyclingPath_Aug2025\\CyclingPathGazette.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4674 features and 7 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\ncy_crs <- sf::st_crs(cycling_path)\nif (is.na(cy_crs$epsg)) {\n  hint <- paste(cy_crs$input, cy_crs$wkt)\n  if (grepl(\"SVY21|Singapore TM|3414\", hint, ignore.case = TRUE)) {\n    message(\"Cycling Path CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\")\n    cycling_path <- sf::st_set_crs(cycling_path, 3414)\n  } else {\n    stop(\"Cycling Path CRS has no EPSG and doesn't look like SVY21. Check the .prj file.\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCycling Path CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display basic information\nmessage(\"Cycling path data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCycling path data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(cycling_path))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 4674\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- CRS: \", sf::st_crs(cycling_path)$input, \" | EPSG: \", sf::st_crs(cycling_path)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- CRS: EPSG:3414 | EPSG: 3414\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Geometry type: \", paste(unique(sf::st_geometry_type(cycling_path)), collapse = \", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Geometry type: MULTILINESTRING\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.3 Import PreSchoolsLocation (Point)\nmessage(\"\\n=== Importing Pre-Schools Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Pre-Schools Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\npreschool_file <- file.path(path_geo, \"PreSchoolsLocation.kml\")\nif (!file.exists(preschool_file)) {\n  stop(\"PreSchoolsLocation.kml not found at: \", preschool_file,\n       \"\\nPlease ensure the file is placed in: \", path_geo)\n}\n\npreschools <- st_read(preschool_file, quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\Users\\HOPE\\Desktop\\ISSS626\\Hands-on_Ex\\Hands-on_ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Display basic information before transformation\nmessage(\"Pre-schools data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPre-schools data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(preschools))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 2290\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Original CRS EPSG: \", st_crs(preschools)$epsg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Original CRS EPSG: 4326\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Geometry type: \", unique(st_geometry_type(preschools)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Geometry type: POINT\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1.4 Import listings.csv (Aspatial)\nmessage(\"\\n=== Importing Airbnb Listings Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Importing Airbnb Listings Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\nlistings_file <- file.path(path_asp, \"listings.csv\")\nif (!file.exists(listings_file)) {\n  stop(\"listings.csv not found at: \", listings_file,\n       \"\\nPlease ensure the file is placed in: \", path_asp)\n}\n\nlistings <- read_csv(listings_file, show_col_types = FALSE)\n\n# Verify required columns exist\nif (!all(c(\"latitude\", \"longitude\") %in% names(listings))) {\n  stop(\"listings.csv must contain 'latitude' and 'longitude' columns\")\n}\n\nmessage(\"Listings data imported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nListings data imported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Records: \", nrow(listings))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Records: 3659\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Columns: \", ncol(listings))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Columns: 79\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- Latitude/Longitude columns: VERIFIED\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- Latitude/Longitude columns: VERIFIED\n```\n\n\n:::\n:::\n\n\n### Step 2: Coordinate System Transformation and Validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== CRS Transformation and Validation ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== CRS Transformation and Validation ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define target CRS\ncrs_target <- sf::st_crs(3414)\n\n# Transform Pre-Schools from WGS84 (4326) to SVY21 (3414)\nif (st_crs(preschools)$epsg == 4326) {\n  message(\"Transforming Pre-Schools from EPSG:4326 to EPSG:3414...\")\n  preschools <- st_transform(preschools, crs = crs_target)\n  message(\"Transformation completed\")\n} else if (st_crs(preschools) != crs_target) {\n  stop(\"Unexpected CRS for Pre-Schools. Expected 4326 or 3414, got: \", \n       st_crs(preschools)$epsg)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTransforming Pre-Schools from EPSG:4326 to EPSG:3414...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nTransformation completed\n```\n\n\n:::\n\n```{.r .cell-code}\n# Handle potential GEOMETRYCOLLECTION from KML\nif (any(st_geometry_type(preschools) == \"GEOMETRYCOLLECTION\")) {\n  message(\"Extracting POINT geometries from GEOMETRYCOLLECTION...\")\n  preschools <- st_collection_extract(preschools, \"POINT\")\n}\n\n# Verify all spatial data is in EPSG:3414\nmessage(\"\\nVerifying CRS consistency...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nVerifying CRS consistency...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Assert CRS for all spatial datasets using object comparison\nif (st_crs(mpsz) != crs_target) {\n  stop(\"Subzone CRS is not EPSG:3414. Current CRS: \", st_crs(mpsz)$input)\n}\n\nif (st_crs(cycling_path) != crs_target) {\n  stop(\"Cycling Path CRS is not EPSG:3414. Current CRS: \", st_crs(cycling_path)$input)\n}\n\nif (st_crs(preschools) != crs_target) {\n  stop(\"Pre-Schools CRS is not EPSG:3414 after transform. Current CRS: \", st_crs(preschools)$input)\n}\n\nmessage(\"✓ All spatial datasets are in EPSG:3414 (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All spatial datasets are in EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\n# Verify geometry types\nmessage(\"\\nVerifying geometry types...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nVerifying geometry types...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check subzone geometry\nsubzone_geom <- unique(st_geometry_type(mpsz))\nif (!all(subzone_geom %in% c(\"POLYGON\", \"MULTIPOLYGON\"))) {\n  stop(\"Subzone should be POLYGON or MULTIPOLYGON, got: \", paste(subzone_geom, collapse=\", \"))\n}\n\n# Check cycling path geometry  \ncycling_geom <- unique(st_geometry_type(cycling_path))\nif (!all(cycling_geom %in% c(\"LINESTRING\", \"MULTILINESTRING\"))) {\n  stop(\"Cycling Path should be LINESTRING or MULTILINESTRING, got: \", paste(cycling_geom, collapse=\", \"))\n}\n\n# Check preschools geometry\npreschool_geom <- unique(st_geometry_type(preschools))\nif (!all(preschool_geom %in% c(\"POINT\"))) {\n  stop(\"Pre-Schools should be POINT, got: \", paste(preschool_geom, collapse=\", \"))\n}\n\nmessage(\"✓ All geometry types verified\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All geometry types verified\n```\n\n\n:::\n:::\n\n\n### Step 3: Data Cleaning and Standardization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Data Cleaning and Standardization ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Data Cleaning and Standardization ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3.1 Clean column names (snake_case)\nmessage(\"Standardizing column names to snake_case...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nStandardizing column names to snake_case...\n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz <- mpsz %>% janitor::clean_names()\ncycling_path <- cycling_path %>% janitor::clean_names()\npreschools <- preschools %>% janitor::clean_names()\n\n# 3.2 Select and retain key fields\nmessage(\"Selecting key fields...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSelecting key fields...\n```\n\n\n:::\n\n```{.r .cell-code}\n# For subzone: retain subzone_n and pln_area_n\nif (all(c(\"subzone_n\", \"pln_area_n\") %in% names(mpsz))) {\n  mpsz_clean <- mpsz %>%\n    select(subzone_n, pln_area_n, geometry)\n} else {\n  message(\"Note: Expected fields 'subzone_n' or 'pln_area_n' not found. Retaining all fields.\")\n  mpsz_clean <- mpsz\n}\n\n# For cycling path: retain basic identification fields\ncycling_clean <- cycling_path %>%\n  select(any_of(c(\"objectid\", \"name\", \"type\", \"status\")), geometry)\n\n# For preschools: retain name field\nif (\"name\" %in% names(preschools)) {\n  preschools_clean <- preschools %>%\n    select(name, geometry)\n} else {\n  message(\"Note: 'name' field not found in Pre-Schools. Retaining all fields.\")\n  preschools_clean <- preschools\n}\n\n# 3.3 Remove empty geometries\nmessage(\"Checking for empty geometries...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nChecking for empty geometries...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check and remove empty geometries\nn_empty_mpsz <- sum(st_is_empty(mpsz_clean))\nn_empty_cycling <- sum(st_is_empty(cycling_clean))\nn_empty_preschools <- sum(st_is_empty(preschools_clean))\n\nif (n_empty_mpsz > 0) {\n  message(\"Removing \", n_empty_mpsz, \" empty geometries from subzone data\")\n  mpsz_clean <- mpsz_clean[!st_is_empty(mpsz_clean), ]\n}\n\nif (n_empty_cycling > 0) {\n  message(\"Removing \", n_empty_cycling, \" empty geometries from cycling path data\")\n  cycling_clean <- cycling_clean[!st_is_empty(cycling_clean), ]\n}\n\nif (n_empty_preschools > 0) {\n  message(\"Removing \", n_empty_preschools, \" empty geometries from preschools data\")\n  preschools_clean <- preschools_clean[!st_is_empty(preschools_clean), ]\n}\n\nmessage(\"✓ Data cleaning completed\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ Data cleaning completed\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3.4 Make geometries valid if needed\nmessage(\"Validating geometries...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nValidating geometries...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check and fix invalid geometries\nif (any(!st_is_valid(mpsz_clean))) {\n  message(\"Fixing invalid geometries in subzone data...\")\n  mpsz_clean <- st_make_valid(mpsz_clean)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nFixing invalid geometries in subzone data...\n```\n\n\n:::\n\n```{.r .cell-code}\nif (any(!st_is_valid(cycling_clean))) {\n  message(\"Fixing invalid geometries in cycling path data...\")\n  cycling_clean <- st_make_valid(cycling_clean)\n}\n\nif (any(!st_is_valid(preschools_clean))) {\n  message(\"Fixing invalid geometries in preschools data...\")\n  preschools_clean <- st_make_valid(preschools_clean)\n}\n\nmessage(\"✓ All geometries are valid\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All geometries are valid\n```\n\n\n:::\n:::\n\n\n### Step 4: Export Clean Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n=== Exporting Clean Data ===\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n=== Exporting Clean Data ===\n```\n\n\n:::\n\n```{.r .cell-code}\n# Define output file paths\nsubzone_out <- file.path(path_geo, \"clean_subzone.gpkg\")\ncycling_out <- file.path(path_geo, \"clean_cycling_path.gpkg\")\npreschools_out <- file.path(path_geo, \"clean_preschools_svy21.gpkg\")\n\n# Remove existing files to avoid multiple layers\nif (file.exists(subzone_out)) {\n  message(\"Removing existing clean_subzone.gpkg\")\n  file.remove(subzone_out)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRemoving existing clean_subzone.gpkg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nif (file.exists(cycling_out)) {\n  message(\"Removing existing clean_cycling_path.gpkg\")\n  file.remove(cycling_out)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRemoving existing clean_cycling_path.gpkg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nif (file.exists(preschools_out)) {\n  message(\"Removing existing clean_preschools_svy21.gpkg\")\n  file.remove(preschools_out)\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRemoving existing clean_preschools_svy21.gpkg\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Export to GeoPackage\nmessage(\"Writing clean data to GeoPackage files...\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWriting clean data to GeoPackage files...\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(mpsz_clean, subzone_out, layer = \"subzone\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWriting layer `subzone' to data source \n  `C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_subzone.gpkg' using driver `GPKG'\nWriting 323 features with 2 fields and geometry type Unknown (any).\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(cycling_clean, cycling_out, layer = \"cycling_path\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWriting layer `cycling_path' to data source \n  `C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_cycling_path.gpkg' using driver `GPKG'\nWriting 4674 features with 0 fields and geometry type Multi Line String.\n```\n\n\n:::\n\n```{.r .cell-code}\nst_write(preschools_clean, preschools_out, layer = \"preschools\", quiet = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWriting layer `preschools' to data source \n  `C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_preschools_svy21.gpkg' using driver `GPKG'\nWriting 2290 features with 1 fields and geometry type 3D Point.\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\n✓ All clean data exported successfully\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n✓ All clean data exported successfully\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Output files:\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nOutput files:\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- \", subzone_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_subzone.gpkg\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- \", cycling_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_cycling_path.gpkg\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"- \", preschools_out)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n- C:/Users/HOPE/Desktop/ISSS626/Hands-on_Ex/Hands-on_ex01/data/geospatial/clean_preschools_svy21.gpkg\n```\n\n\n:::\n:::\n\n\n## Results\n\n### Data Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"\\n\", strrep(\"=\", 60), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n============================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"DATA PROCESSING SUMMARY\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nDATA PROCESSING SUMMARY\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(strrep(\"=\", 60), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n============================================================\n```\n\n\n:::\n\n```{.r .cell-code}\n# Subzone Summary\nmessage(\"1. SUBZONE DATA (clean_subzone.gpkg)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n1. SUBZONE DATA (clean_subzone.gpkg)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(mpsz_clean))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 323\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", st_crs(mpsz_clean)$epsg, \" (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry types: \", paste(unique(st_geometry_type(mpsz_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry types: POLYGON, MULTIPOLYGON\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Fields: \", paste(names(st_drop_geometry(mpsz_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Fields: subzone_n, pln_area_n\n```\n\n\n:::\n\n```{.r .cell-code}\n# Cycling Path Summary\nmessage(\"\\n2. CYCLING PATH DATA (clean_cycling_path.gpkg)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n2. CYCLING PATH DATA (clean_cycling_path.gpkg)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(cycling_clean))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 4674\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", st_crs(cycling_clean)$epsg, \" (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry types: \", paste(unique(st_geometry_type(cycling_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry types: MULTILINESTRING\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Fields: \", paste(names(st_drop_geometry(cycling_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Fields: \n```\n\n\n:::\n\n```{.r .cell-code}\n# Pre-Schools Summary\nmessage(\"\\n3. PRE-SCHOOLS DATA (clean_preschools_svy21.gpkg)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n3. PRE-SCHOOLS DATA (clean_preschools_svy21.gpkg)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(preschools_clean))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 2290\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - CRS: EPSG:\", st_crs(preschools_clean)$epsg, \" (SVY21)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - CRS: EPSG:3414 (SVY21)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Geometry types: \", paste(unique(st_geometry_type(preschools_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Geometry types: POINT\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Fields: \", paste(names(st_drop_geometry(preschools_clean)), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Fields: name\n```\n\n\n:::\n\n```{.r .cell-code}\n# Listings Summary\nmessage(\"\\n4. LISTINGS DATA (listings.csv - read only)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n4. LISTINGS DATA (listings.csv - read only)\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Records: \", nrow(listings))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Records: 3659\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Latitude range: [\", round(min(listings$latitude), 4), \", \", \n        round(max(listings$latitude), 4), \"]\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Latitude range: [1.2227, 1.4578]\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"   - Longitude range: [\", round(min(listings$longitude), 4), \", \", \n        round(max(listings$longitude), 4), \"]\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n   - Longitude range: [103.6346, 103.9896]\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\n\", strrep(\"=\", 60))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n============================================================\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"✓ All data processing completed successfully!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✓ All data processing completed successfully!\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(strrep(\"=\", 60))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n============================================================\n```\n\n\n:::\n:::\n\n\n### Sample Data Preview\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preview first 5 records without geometry\nmessage(\"\\nSample records from cleaned datasets:\")\n\nmessage(\"\\nSubzone (first 3 records):\")\nprint(head(st_drop_geometry(mpsz_clean), 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     subzone_n      pln_area_n\n1 MARINA SOUTH    MARINA SOUTH\n2 PEARL'S HILL          OUTRAM\n3    BOAT QUAY SINGAPORE RIVER\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\nCycling Path (first 3 records):\")\nprint(head(st_drop_geometry(cycling_clean), 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndata frame with 0 columns and 3 rows\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"\\nPre-Schools (first 3 records):\")\nprint(head(st_drop_geometry(preschools_clean), 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name\n1 kml_1\n2 kml_2\n3 kml_3\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n*End of Hands-on Exercise 01a*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}