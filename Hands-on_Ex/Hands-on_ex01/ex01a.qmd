---
title: "Hands-on Exercise 01a: Geospatial Data Wrangling"
format: html
execute:
  freeze: true      
  warning: false
  message: true
---

## Overview

This exercise focuses on importing, cleaning, and standardizing geospatial data for Singapore. We will process three spatial datasets (subzones, cycling paths, and pre-schools) and one aspatial dataset (Airbnb listings), ensuring all spatial data uses the SVY21 (EPSG:3414) coordinate reference system.

## Setup and Environment

```{r setup, message=FALSE, warning=FALSE}
# Load required packages (including lwgeom for geometry validation)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")

pacman::p_load(sf, lwgeom, dplyr, readr, janitor, stringr, here, tmap, ggplot2, units)

# Print session information for reproducibility
cat("R version:", R.version.string, "\n")
cat("sf version:", as.character(packageVersion("sf")), "\n")
message("Date: ", as.character(Sys.Date()))

# Define path variables using here::here()
path_root <- here::here()
path_ex01 <- here::here("Hands-on_Ex", "Hands-on_ex01")
path_geo <- here::here("Hands-on_Ex", "Hands-on_ex01", "data", "geospatial")
path_asp <- here::here("Hands-on_Ex", "Hands-on_ex01", "data", "aspatial")

# Display paths for verification
message("Project root: ", path_root)
message("Exercise 01 path: ", path_ex01)
message("Geospatial data path: ", path_geo)
message("Aspatial data path: ", path_asp)
```

## Workflow

### Step 1: Import Geospatial Data

```{r import-subzone, message=TRUE}
# 1.1 Import MP14_SUBZONE_WEB_PL (Polygon)
message("\n=== Importing Subzone Data ===")

subzone_file <- file.path(path_geo, "MP14_SUBZONE_WEB_PL.shp")
if (!file.exists(subzone_file)) {
  stop("MP14_SUBZONE_WEB_PL.shp not found at: ", subzone_file,
       "\nPlease ensure the file is placed in: ", path_geo)
}

mpsz <- sf::st_read(dsn = path_geo, layer = "MP14_SUBZONE_WEB_PL", quiet = FALSE)

sub_crs <- sf::st_crs(mpsz)
if (is.na(sub_crs$epsg)) {
  hint <- paste(sub_crs$input, sub_crs$wkt)
  if (grepl("SVY21|Singapore TM|3414", hint, ignore.case = TRUE)) {
    message("Subzone CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.")
    mpsz <- sf::st_set_crs(mpsz, 3414)
  } else {
    stop("Subzone CRS has no EPSG and doesn't look like SVY21. Check the .prj file.")
  }
}

# Display basic information
message("Subzone data imported successfully")
message("- Records: ", nrow(mpsz))
message("- CRS: ", sf::st_crs(mpsz)$input, " | EPSG: ", sf::st_crs(mpsz)$epsg)
message("- Geometry type: ", paste(unique(sf::st_geometry_type(mpsz)), collapse = ", "))



```

```{r import-cycling, message=TRUE}
# 1.2 Import CyclingPathGazette (Line)
message("\n=== Importing Cycling Path Data ===")

cycling_file <- file.path(path_geo, "CyclingPath_Aug2025", "CyclingPathGazette.shp")
if (!file.exists(cycling_file)) {
  stop("CyclingPathGazette.shp not found at: ", cycling_file,
       "\nPlease ensure the file is placed in: ", file.path(path_geo, "CyclingPath_Aug2025"))
}

cycling_path <- sf::st_read(cycling_file, quiet = FALSE)


cy_crs <- sf::st_crs(cycling_path)
if (is.na(cy_crs$epsg)) {
  hint <- paste(cy_crs$input, cy_crs$wkt)
  if (grepl("SVY21|Singapore TM|3414", hint, ignore.case = TRUE)) {
    message("Cycling Path CRS shows 'SVY21' but EPSG is missing — setting EPSG:3414 explicitly.")
    cycling_path <- sf::st_set_crs(cycling_path, 3414)
  } else {
    stop("Cycling Path CRS has no EPSG and doesn't look like SVY21. Check the .prj file.")
  }
}

# Display basic information
message("Cycling path data imported successfully")
message("- Records: ", nrow(cycling_path))
message("- CRS: ", sf::st_crs(cycling_path)$input, " | EPSG: ", sf::st_crs(cycling_path)$epsg)
message("- Geometry type: ", paste(unique(sf::st_geometry_type(cycling_path)), collapse = ", "))

```

```{r import-preschools, message=TRUE}
# 1.3 Import PreSchoolsLocation (Point)
message("\n=== Importing Pre-Schools Data ===")

preschool_file <- file.path(path_geo, "PreSchoolsLocation.kml")
if (!file.exists(preschool_file)) {
  stop("PreSchoolsLocation.kml not found at: ", preschool_file,
       "\nPlease ensure the file is placed in: ", path_geo)
}

preschools <- st_read(preschool_file, quiet = FALSE)

# Display basic information before transformation
message("Pre-schools data imported successfully")
message("- Records: ", nrow(preschools))
message("- Original CRS EPSG: ", st_crs(preschools)$epsg)
message("- Geometry type: ", unique(st_geometry_type(preschools)))
```

```{r import-listings, message=TRUE}
# 1.4 Import listings.csv (Aspatial)
message("\n=== Importing Airbnb Listings Data ===")

listings_file <- file.path(path_asp, "listings.csv")
if (!file.exists(listings_file)) {
  stop("listings.csv not found at: ", listings_file,
       "\nPlease ensure the file is placed in: ", path_asp)
}

listings <- read_csv(listings_file, show_col_types = FALSE)

# Verify required columns exist
if (!all(c("latitude", "longitude") %in% names(listings))) {
  stop("listings.csv must contain 'latitude' and 'longitude' columns")
}

message("Listings data imported successfully")
message("- Records: ", nrow(listings))
message("- Columns: ", ncol(listings))
message("- Latitude/Longitude columns: VERIFIED")
```

### Step 2: Exploratory Data Inspection (Ch. 1.5–1.6)

```{r inspect-subzone, message=TRUE}
message("\n=== Inspecting Subzone Data Structure ===")

# Geometry column summary and CRS bbox overview
print(st_geometry(mpsz))
print(st_bbox(mpsz))

# Attribute glimpse and sample records
glimpse(mpsz)
print(head(mpsz, 3))
```

```{r inspect-cycling, message=TRUE}
message("\n=== Inspecting Cycling Path Data Structure ===")

print(st_geometry(cycling_path))
print(st_bbox(cycling_path))

glimpse(cycling_path)
print(head(cycling_path, 3))
```

```{r inspect-preschools, message=TRUE}
message("\n=== Inspecting Pre-School Data Structure ===")

print(st_geometry(preschools))
print(st_bbox(preschools))

glimpse(preschools)
print(head(preschools, 3))
```

```{r exploratory-plots, message=TRUE}
message("\n=== Quick Look Plots (Chapter 1.6) ===")

op <- par(mfrow = c(2, 2))
plot(mpsz, main = "MPSZ Subzones")
plot(st_geometry(mpsz), main = "Subzone Geometry Only")
if ("PLN_AREA_N" %in% names(mpsz)) {
  plot(mpsz["PLN_AREA_N"], main = "Planning Area Names")
} else if ("pln_area_n" %in% names(mpsz)) {
  plot(mpsz["pln_area_n"], main = "Planning Area Names")
} else {
  plot(st_geometry(mpsz), main = "Planning Area Names")
}
plot(st_geometry(mpsz), main = "Subzones with Pre-Schools")
plot(st_geometry(preschools), add = TRUE, col = "red", pch = 20)
par(op)
```

### Step 3: Converting Aspatial Data to sf (Ch. 1.8.2)

```{r listings-to-sf, message=TRUE}
message("\n=== Converting Airbnb Listings to sf ===")

listings_sf <- listings %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE) %>%
  st_transform(3414)

message("Listings converted to sf with CRS EPSG:", st_crs(listings_sf)$epsg)
glimpse(listings_sf)
print(head(listings_sf, 3))
```

```{r listings-map, message=FALSE}
message("\n=== DIY Map: Airbnb Listings over Subzones ===")

old_tmap_mode <- tmap_mode("plot")

tmap::tm_shape(mpsz) +
  tmap::tm_polygons(col = "grey90", border.col = "grey60") +
  tmap::tm_shape(listings_sf) +
  tmap::tm_symbols(col = "tomato", size = 0.03, alpha = 0.5) +
  tmap::tm_layout(
    title = "Airbnb Listings across Singapore Subzones",
    legend.show = FALSE,
    frame = FALSE
  )

tmap_mode(old_tmap_mode)
```

### Step 4: Coordinate System Transformation and Validation

```{r crs-transform, message=TRUE}
message("\n=== CRS Transformation and Validation ===")

# Define target CRS
crs_target <- sf::st_crs(3414)

# Transform Pre-Schools from WGS84 (4326) to SVY21 (3414)
if (st_crs(preschools)$epsg == 4326) {
  message("Transforming Pre-Schools from EPSG:4326 to EPSG:3414...")
  preschools <- st_transform(preschools, crs = crs_target)
  message("Transformation completed")
} else if (st_crs(preschools) != crs_target) {
  stop("Unexpected CRS for Pre-Schools. Expected 4326 or 3414, got: ", 
       st_crs(preschools)$epsg)
}

# Handle potential GEOMETRYCOLLECTION from KML
if (any(st_geometry_type(preschools) == "GEOMETRYCOLLECTION")) {
  message("Extracting POINT geometries from GEOMETRYCOLLECTION...")
  preschools <- st_collection_extract(preschools, "POINT")
}

# Verify all spatial data is in EPSG:3414
message("\nVerifying CRS consistency...")

# Assert CRS for all spatial datasets using object comparison
if (st_crs(mpsz) != crs_target) {
  stop("Subzone CRS is not EPSG:3414. Current CRS: ", st_crs(mpsz)$input)
}

if (st_crs(cycling_path) != crs_target) {
  stop("Cycling Path CRS is not EPSG:3414. Current CRS: ", st_crs(cycling_path)$input)
}

if (st_crs(preschools) != crs_target) {
  stop("Pre-Schools CRS is not EPSG:3414 after transform. Current CRS: ", st_crs(preschools)$input)
}

message("✓ All spatial datasets are in EPSG:3414 (SVY21)")

# Verify geometry types
message("\nVerifying geometry types...")

# Check subzone geometry
subzone_geom <- unique(st_geometry_type(mpsz))
if (!all(subzone_geom %in% c("POLYGON", "MULTIPOLYGON"))) {
  stop("Subzone should be POLYGON or MULTIPOLYGON, got: ", paste(subzone_geom, collapse=", "))
}

# Check cycling path geometry  
cycling_geom <- unique(st_geometry_type(cycling_path))
if (!all(cycling_geom %in% c("LINESTRING", "MULTILINESTRING"))) {
  stop("Cycling Path should be LINESTRING or MULTILINESTRING, got: ", paste(cycling_geom, collapse=", "))
}

# Check preschools geometry
preschool_geom <- unique(st_geometry_type(preschools))
if (!all(preschool_geom %in% c("POINT"))) {
  stop("Pre-Schools should be POINT, got: ", paste(preschool_geom, collapse=", "))
}

message("✓ All geometry types verified")
```

### Step 5: Data Cleaning and Standardization

```{r data-cleaning, message=TRUE}
message("\n=== Data Cleaning and Standardization ===")

# 3.1 Clean column names (snake_case)
message("Standardizing column names to snake_case...")

mpsz <- mpsz %>% janitor::clean_names()
cycling_path <- cycling_path %>% janitor::clean_names()
preschools <- preschools %>% janitor::clean_names()

# 3.2 Select and retain key fields
message("Selecting key fields...")

# For subzone: retain subzone_n and pln_area_n
if (all(c("subzone_n", "pln_area_n") %in% names(mpsz))) {
  mpsz_clean <- mpsz %>%
    select(subzone_n, pln_area_n, geometry)
} else {
  message("Note: Expected fields 'subzone_n' or 'pln_area_n' not found. Retaining all fields.")
  mpsz_clean <- mpsz
}

# For cycling path: retain basic identification fields
cycling_clean <- cycling_path %>%
  select(any_of(c("objectid", "name", "type", "status")), geometry)

# For preschools: retain name field
if ("name" %in% names(preschools)) {
  preschools_clean <- preschools %>%
    select(name, geometry)
} else {
  message("Note: 'name' field not found in Pre-Schools. Retaining all fields.")
  preschools_clean <- preschools
}

# 3.3 Remove empty geometries
message("Checking for empty geometries...")

# Check and remove empty geometries
n_empty_mpsz <- sum(st_is_empty(mpsz_clean))
n_empty_cycling <- sum(st_is_empty(cycling_clean))
n_empty_preschools <- sum(st_is_empty(preschools_clean))

if (n_empty_mpsz > 0) {
  message("Removing ", n_empty_mpsz, " empty geometries from subzone data")
  mpsz_clean <- mpsz_clean[!st_is_empty(mpsz_clean), ]
}

if (n_empty_cycling > 0) {
  message("Removing ", n_empty_cycling, " empty geometries from cycling path data")
  cycling_clean <- cycling_clean[!st_is_empty(cycling_clean), ]
}

if (n_empty_preschools > 0) {
  message("Removing ", n_empty_preschools, " empty geometries from preschools data")
  preschools_clean <- preschools_clean[!st_is_empty(preschools_clean), ]
}

message("✓ Data cleaning completed")

# 3.4 Make geometries valid if needed
message("Validating geometries...")

# Check and fix invalid geometries
if (any(!st_is_valid(mpsz_clean))) {
  message("Fixing invalid geometries in subzone data...")
  mpsz_clean <- st_make_valid(mpsz_clean)
}

if (any(!st_is_valid(cycling_clean))) {
  message("Fixing invalid geometries in cycling path data...")
  cycling_clean <- st_make_valid(cycling_clean)
}

if (any(!st_is_valid(preschools_clean))) {
  message("Fixing invalid geometries in preschools data...")
  preschools_clean <- st_make_valid(preschools_clean)
}

message("✓ All geometries are valid")
```

### Step 6: Export Clean Data

```{r export-data, message=TRUE}
message("\n=== Exporting Clean Data ===")

# Define output file paths
subzone_out <- file.path(path_geo, "clean_subzone.gpkg")
cycling_out <- file.path(path_geo, "clean_cycling_path.gpkg")
preschools_out <- file.path(path_geo, "clean_preschools_svy21.gpkg")

# Remove existing files to avoid multiple layers
if (file.exists(subzone_out)) {
  message("Removing existing clean_subzone.gpkg")
  file.remove(subzone_out)
}

if (file.exists(cycling_out)) {
  message("Removing existing clean_cycling_path.gpkg")
  file.remove(cycling_out)
}

if (file.exists(preschools_out)) {
  message("Removing existing clean_preschools_svy21.gpkg")
  file.remove(preschools_out)
}

# Export to GeoPackage
message("Writing clean data to GeoPackage files...")

st_write(mpsz_clean, subzone_out, layer = "subzone", quiet = FALSE)
st_write(cycling_clean, cycling_out, layer = "cycling_path", quiet = FALSE)
st_write(preschools_clean, preschools_out, layer = "preschools", quiet = FALSE)

message("\n✓ All clean data exported successfully")
message("Output files:")
message("- ", subzone_out)
message("- ", cycling_out)
message("- ", preschools_out)
```

### Step 7: Geospatial Processing Examples (Ch. 1.9)

```{r geoprocessing, message=TRUE}
message("\n=== Cycling Path Buffer and Area Calculations ===")

# Create 5 metre buffer around cleaned cycling paths (per feature)
cycling_buffer <- cycling_clean %>%
  st_buffer(dist = 5) %>%
  mutate(
    buffer_area_sqm = st_area(.),
    buffer_area_sqkm = set_units(buffer_area_sqm, "km^2")
  )

total_buffer_area <- sum(cycling_buffer$buffer_area_sqkm)
message(
  "Total buffered cycling corridor area (5 m): ",
  signif(as.numeric(total_buffer_area), 4),
  " sq km"
)

# Intersect buffer with Tampines West subzone (if available)
tampines_west <- mpsz_clean %>%
  filter(
    toupper(pln_area_n) == "TAMPINES",
    toupper(subzone_n) == "TAMPINES WEST"
  )

if (nrow(tampines_west) == 0) {
  message("Tampines West subzone not found – selecting first available subzone instead.")
  tampines_west <- mpsz_clean[1, ]
}

tampines_buffer <- st_intersection(st_make_valid(tampines_west), st_union(cycling_buffer))

if (nrow(tampines_buffer) > 0) {
  tampines_area <- set_units(st_area(tampines_buffer), "km^2")
  message(
    "Buffered cycling area within selected subzone: ",
    signif(as.numeric(tampines_area), 4),
    " sq km"
  )
} else {
  message("No buffered cycling segments found within the selected subzone.")
}

```

```{r tampines-buffer-map, message=FALSE}
message("\n=== Visualising Cycling Buffer in Tampines West ===")

old_tmap_mode <- tmap_mode("plot")

if (nrow(tampines_buffer) > 0) {
  tmap::tm_shape(tampines_west) +
    tmap::tm_polygons(col = "#f0f4ff", border.col = "#26456e") +
    tmap::tm_shape(tampines_buffer) +
    tmap::tm_fill(col = "#ffb347", alpha = 0.6) +
    tmap::tm_layout(
      title = "5 m Cycling Corridor Buffer in Tampines West",
      legend.show = FALSE,
      frame = FALSE
    )
} else {
  message("Skipping map because no buffered cycling segments were found in the selected subzone.")
}

tmap_mode(old_tmap_mode)
```

```{r preschool-summary, message=TRUE}
# Count pre-schools per subzone
message("\n=== Preschool Counts by Subzone ===")

subzone_preschool <- mpsz_clean %>%
  dplyr::mutate(
    subzone_area_sqkm = as.numeric(units::set_units(sf::st_area(.), "km^2")),
    preschool_count   = lengths(sf::st_intersects(., preschools_clean)),
    preschool_density = preschool_count / subzone_area_sqkm
  )

subzone_summary <- subzone_preschool %>%
  sf::st_drop_geometry() %>%
  dplyr::transmute(
    subzone_n,
    planning_area      = pln_area_n,
    subzone_area_sqkm,
    preschool_count,
    preschool_density
  )

print(head(subzone_summary, 5))

message("\nSummary of preschool density (counts per sq km):")
print(summary(subzone_summary$preschool_density))

top_subzone <- subzone_summary %>%
  dplyr::arrange(dplyr::desc(preschool_count)) %>%
  dplyr::slice_head(n = 1)

message("\nSubzone with the highest preschool count:")
print(top_subzone)
```

```{r preschool-hist, message=FALSE}
p_hist <- ggplot(subzone_summary, aes(x = preschool_density)) +
  geom_histogram(fill = "#74a9cf", colour = "white", bins = 20) +
  labs(
    x = "Preschool Density (count per sq km)",
    y = "Number of Subzones",
    title = "Distribution of Preschool Density across Subzones"
  ) +
  theme_minimal()
p_hist
```

```{r preschool-scatter, message=FALSE}
p_scatter <- ggplot(subzone_summary, aes(x = preschool_count, y = preschool_density)) +
  geom_point(alpha = 0.6, colour = "#2b8cbe") +
  labs(
    x = "Preschool Count",
    y = "Preschool Density (count per sq km)",
    title = "Preschool Density vs. Count"
  ) +
  theme_minimal()
p_scatter
```

## Results

### Data Summary
```{r summary-output, message=TRUE}
message("\n", strrep("=", 60), "\n")
message("DATA PROCESSING SUMMARY")
message(strrep("=", 60), "\n")

# Subzone Summary
message("1. SUBZONE DATA (clean_subzone.gpkg)")
message("   - Records: ", nrow(mpsz_clean))
message("   - CRS: EPSG:", sf::st_crs(mpsz_clean)$epsg, " (SVY21)")
message("   - Geometry types: ", paste(unique(sf::st_geometry_type(mpsz_clean)), collapse=", "))
message("   - Fields: ", paste(names(sf::st_drop_geometry(mpsz_clean)), collapse=", "))

# Cycling Path Summary
message("\n2. CYCLING PATH DATA (clean_cycling_path.gpkg)")
message("   - Records: ", nrow(cycling_clean))
message("   - CRS: EPSG:", sf::st_crs(cycling_clean)$epsg, " (SVY21)")
message("   - Geometry types: ", paste(unique(sf::st_geometry_type(cycling_clean)), collapse=", "))
message("   - Fields: ", paste(names(sf::st_drop_geometry(cycling_clean)), collapse=", "))

# Pre-Schools Summary
message("\n3. PRE-SCHOOLS DATA (clean_preschools_svy21.gpkg)")
message("   - Records: ", nrow(preschools_clean))
message("   - CRS: EPSG:", sf::st_crs(preschools_clean)$epsg, " (SVY21)")
message("   - Geometry types: ", paste(unique(sf::st_geometry_type(preschools_clean)), collapse=", "))
message("   - Fields: ", paste(names(sf::st_drop_geometry(preschools_clean)), collapse=", "))

# Listings Summary
message("\n4. LISTINGS DATA (listings.csv - read only)")
message("   - Records: ", nrow(listings))
message("   - Latitude range: [", round(min(listings$latitude), 4), ", ",
        round(max(listings$latitude), 4), "]")
message("   - Longitude range: [", round(min(listings$longitude), 4), ", ",
        round(max(listings$longitude), 4), "]")

message("\n5. LISTINGS DATA (listings_sf - transformed)")
message("   - Records: ", nrow(listings_sf))
message("   - CRS: EPSG:", sf::st_crs(listings_sf)$epsg)
message("   - Geometry type: ", unique(sf::st_geometry_type(listings_sf)))

message("\n", strrep("=", 60))
message("✓ All data processing completed successfully!")
message(strrep("=", 60))
```

### Sample Data Preview
```{r preview-data}
# Preview first 3 records without geometry
message("\nSample records from cleaned datasets:")

message("\nSubzone (first 3 records):")
print(head(sf::st_drop_geometry(mpsz_clean), 3))

message("\nCycling Path (first 3 records):")
print(head(sf::st_drop_geometry(cycling_clean), 3))

message("\nPre-Schools (first 3 records):")
print(head(sf::st_drop_geometry(preschools_clean), 3))
```
