---
title: "Hands-on Exercise 01a: Geospatial Data Wrangling"
format: html
execute:
  freeze: true      
  warning: false
  message: true
---

## Overview

This exercise focuses on importing, cleaning, and standardizing geospatial data for Singapore. We will process three spatial datasets (subzones, cycling paths, and pre-schools) and one aspatial dataset (Airbnb listings), ensuring all spatial data uses the SVY21 (EPSG:3414) coordinate reference system.

## Setup and Environment

```{r setup, message=FALSE, warning=FALSE}
# Load required packages (including lwgeom for geometry validation)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")

pacman::p_load(sf, lwgeom, dplyr, readr, janitor, stringr, here)
pacman::p_load(sf, lwgeom, dplyr, readr, janitor, stringr, here, tmap, ggplot2, units)

# Print session information for reproducibility
cat("R version:", R.version.string, "\n")
cat("sf version:", as.character(packageVersion("sf")), "\n")
message("Date: ", as.character(Sys.Date()))

# Define path variables using here::here()
path_root <- here::here()
path_ex01 <- here::here("Hands-on_Ex", "Hands-on_ex01")
path_geo <- here::here("Hands-on_Ex", "Hands-on_ex01", "data", "geospatial")
path_asp <- here::here("Hands-on_Ex", "Hands-on_ex01", "data", "aspatial")

# Display paths for verification
message("Project root: ", path_root)
message("Exercise 01 path: ", path_ex01)
message("Geospatial data path: ", path_geo)
message("Aspatial data path: ", path_asp)
```

## Workflow

### Step 1: Import Geospatial Data

```{r import-subzone, message=TRUE}
# 1.1 Import MP14_SUBZONE_WEB_PL (Polygon)
@@ -126,51 +126,117 @@ message("- Geometry type: ", unique(st_geometry_type(preschools)))
```

```{r import-listings, message=TRUE}
# 1.4 Import listings.csv (Aspatial)
message("\n=== Importing Airbnb Listings Data ===")

listings_file <- file.path(path_asp, "listings.csv")
if (!file.exists(listings_file)) {
  stop("listings.csv not found at: ", listings_file,
       "\nPlease ensure the file is placed in: ", path_asp)
}

listings <- read_csv(listings_file, show_col_types = FALSE)

# Verify required columns exist
if (!all(c("latitude", "longitude") %in% names(listings))) {
  stop("listings.csv must contain 'latitude' and 'longitude' columns")
}

message("Listings data imported successfully")
message("- Records: ", nrow(listings))
message("- Columns: ", ncol(listings))
message("- Latitude/Longitude columns: VERIFIED")
```

### Step 2: Coordinate System Transformation and Validation
### Step 2: Exploratory Data Inspection (Ch. 1.5–1.6)

```{r inspect-subzone, message=TRUE}
message("\n=== Inspecting Subzone Data Structure ===")

# Geometry column summary and CRS bbox overview
print(st_geometry(mpsz))
print(st_bbox(mpsz))

# Attribute glimpse and sample records
glimpse(mpsz)
print(head(mpsz, 3))
```

```{r inspect-cycling, message=TRUE}
message("\n=== Inspecting Cycling Path Data Structure ===")

print(st_geometry(cycling_path))
print(st_bbox(cycling_path))

glimpse(cycling_path)
print(head(cycling_path, 3))
```

```{r inspect-preschools, message=TRUE}
message("\n=== Inspecting Pre-School Data Structure ===")

print(st_geometry(preschools))
print(st_bbox(preschools))

glimpse(preschools)
print(head(preschools, 3))
```

```{r exploratory-plots, message=TRUE}
message("\n=== Quick Look Plots (Chapter 1.6) ===")

op <- par(mfrow = c(2, 2))
plot(mpsz, main = "MPSZ Subzones")
plot(st_geometry(mpsz), main = "Subzone Geometry Only")
if ("PLN_AREA_N" %in% names(mpsz)) {
  plot(mpsz["PLN_AREA_N"], main = "Planning Area Names")
} else if ("pln_area_n" %in% names(mpsz)) {
  plot(mpsz["pln_area_n"], main = "Planning Area Names")
} else {
  plot(st_geometry(mpsz), main = "Planning Area Names")
}
plot(st_geometry(mpsz), main = "Subzones with Pre-Schools")
plot(st_geometry(preschools), add = TRUE, col = "red", pch = 20)
par(op)
```

### Step 3: Converting Aspatial Data to sf (Ch. 1.8.2)

```{r listings-to-sf, message=TRUE}
message("\n=== Converting Airbnb Listings to sf ===")

listings_sf <- listings %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326, remove = FALSE) %>%
  st_transform(3414)

message("Listings converted to sf with CRS EPSG:", st_crs(listings_sf)$epsg)
glimpse(listings_sf)
print(head(listings_sf, 3))
```

### Step 4: Coordinate System Transformation and Validation

```{r crs-transform, message=TRUE}
message("\n=== CRS Transformation and Validation ===")

# Define target CRS
crs_target <- sf::st_crs(3414)

# Transform Pre-Schools from WGS84 (4326) to SVY21 (3414)
if (st_crs(preschools)$epsg == 4326) {
  message("Transforming Pre-Schools from EPSG:4326 to EPSG:3414...")
  preschools <- st_transform(preschools, crs = crs_target)
  message("Transformation completed")
} else if (st_crs(preschools) != crs_target) {
  stop("Unexpected CRS for Pre-Schools. Expected 4326 or 3414, got: ", 
       st_crs(preschools)$epsg)
}

# Handle potential GEOMETRYCOLLECTION from KML
if (any(st_geometry_type(preschools) == "GEOMETRYCOLLECTION")) {
  message("Extracting POINT geometries from GEOMETRYCOLLECTION...")
  preschools <- st_collection_extract(preschools, "POINT")
}

# Verify all spatial data is in EPSG:3414
message("\nVerifying CRS consistency...")
@@ -192,51 +258,51 @@ message("✓ All spatial datasets are in EPSG:3414 (SVY21)")

# Verify geometry types
message("\nVerifying geometry types...")

# Check subzone geometry
subzone_geom <- unique(st_geometry_type(mpsz))
if (!all(subzone_geom %in% c("POLYGON", "MULTIPOLYGON"))) {
  stop("Subzone should be POLYGON or MULTIPOLYGON, got: ", paste(subzone_geom, collapse=", "))
}

# Check cycling path geometry  
cycling_geom <- unique(st_geometry_type(cycling_path))
if (!all(cycling_geom %in% c("LINESTRING", "MULTILINESTRING"))) {
  stop("Cycling Path should be LINESTRING or MULTILINESTRING, got: ", paste(cycling_geom, collapse=", "))
}

# Check preschools geometry
preschool_geom <- unique(st_geometry_type(preschools))
if (!all(preschool_geom %in% c("POINT"))) {
  stop("Pre-Schools should be POINT, got: ", paste(preschool_geom, collapse=", "))
}

message("✓ All geometry types verified")
```

### Step 3: Data Cleaning and Standardization
### Step 5: Data Cleaning and Standardization

```{r data-cleaning, message=TRUE}
message("\n=== Data Cleaning and Standardization ===")

# 3.1 Clean column names (snake_case)
message("Standardizing column names to snake_case...")

mpsz <- mpsz %>% janitor::clean_names()
cycling_path <- cycling_path %>% janitor::clean_names()
preschools <- preschools %>% janitor::clean_names()

# 3.2 Select and retain key fields
message("Selecting key fields...")

# For subzone: retain subzone_n and pln_area_n
if (all(c("subzone_n", "pln_area_n") %in% names(mpsz))) {
  mpsz_clean <- mpsz %>%
    select(subzone_n, pln_area_n, geometry)
} else {
  message("Note: Expected fields 'subzone_n' or 'pln_area_n' not found. Retaining all fields.")
  mpsz_clean <- mpsz
}

# For cycling path: retain basic identification fields
cycling_clean <- cycling_path %>%
@@ -276,127 +342,194 @@ if (n_empty_preschools > 0) {

message("✓ Data cleaning completed")

# 3.4 Make geometries valid if needed
message("Validating geometries...")

# Check and fix invalid geometries
if (any(!st_is_valid(mpsz_clean))) {
  message("Fixing invalid geometries in subzone data...")
  mpsz_clean <- st_make_valid(mpsz_clean)
}

if (any(!st_is_valid(cycling_clean))) {
  message("Fixing invalid geometries in cycling path data...")
  cycling_clean <- st_make_valid(cycling_clean)
}

if (any(!st_is_valid(preschools_clean))) {
  message("Fixing invalid geometries in preschools data...")
  preschools_clean <- st_make_valid(preschools_clean)
}

message("✓ All geometries are valid")
```

### Step 4: Export Clean Data
### Step 6: Export Clean Data

```{r export-data, message=TRUE}
message("\n=== Exporting Clean Data ===")

# Define output file paths
subzone_out <- file.path(path_geo, "clean_subzone.gpkg")
cycling_out <- file.path(path_geo, "clean_cycling_path.gpkg")
preschools_out <- file.path(path_geo, "clean_preschools_svy21.gpkg")

# Remove existing files to avoid multiple layers
if (file.exists(subzone_out)) {
  message("Removing existing clean_subzone.gpkg")
  file.remove(subzone_out)
}

if (file.exists(cycling_out)) {
  message("Removing existing clean_cycling_path.gpkg")
  file.remove(cycling_out)
}

if (file.exists(preschools_out)) {
  message("Removing existing clean_preschools_svy21.gpkg")
  file.remove(preschools_out)
}

# Export to GeoPackage
message("Writing clean data to GeoPackage files...")

st_write(mpsz_clean, subzone_out, layer = "subzone", quiet = FALSE)
st_write(cycling_clean, cycling_out, layer = "cycling_path", quiet = FALSE)
st_write(preschools_clean, preschools_out, layer = "preschools", quiet = FALSE)

message("\n✓ All clean data exported successfully")
message("Output files:")
message("- ", subzone_out)
message("- ", cycling_out)
message("- ", preschools_out)
```

### Step 7: Geospatial Processing Examples (Ch. 1.9)

```{r geoprocessing, message=TRUE}
message("\n=== Cycling Path Buffer and Area Calculations ===")

# Create 5 metre buffer around cleaned cycling paths
cycling_buffer <- st_buffer(cycling_clean, dist = 5)
cycling_buffer_union <- st_union(cycling_buffer)

buffer_area_sqm <- st_area(cycling_buffer_union)
buffer_area_sqkm <- set_units(buffer_area_sqm, "km^2")

message("Total buffered cycling corridor area: ", signif(as.numeric(buffer_area_sqkm), 4), " sq km")

# Intersect buffer with a sample planning area (Bedok if present)
target_planning <- if ("pln_area_n" %in% names(mpsz_clean)) {
  mpsz_clean %>% filter(pln_area_n == "BEDOK")
} else {
  mpsz_clean[1, ]
}

buffer_in_planning <- st_intersection(st_make_valid(target_planning), cycling_buffer_union)

if (nrow(buffer_in_planning) > 0) {
  message("Buffered area within selected planning area: ",
          signif(as.numeric(set_units(st_area(buffer_in_planning), "km^2")), 4), " sq km")
} else {
  message("No buffered cycling segments found within the selected planning area.")
}

# Count pre-schools per subzone
message("\n=== Preschool Counts by Subzone ===")

subzone_preschool <- mpsz_clean %>%
  mutate(
    subzone_area_sqkm = as.numeric(set_units(st_area(.), "km^2")),
    preschool_count = lengths(st_intersects(., preschools_clean)),
    preschool_density = preschool_count / subzone_area_sqkm
  )

subzone_summary <- subzone_preschool %>%
  st_drop_geometry() %>%
  transmute(
    subzone_n,
    planning_area = pln_area_n,
    subzone_area_sqkm,
    preschool_count,
    preschool_density
  )

print(head(subzone_summary, 5))

ggplot(subzone_preschool, aes(x = subzone_area_sqkm, y = preschool_density)) +
  geom_point(alpha = 0.6, colour = "steelblue") +
  labs(
    x = "Subzone Area (sq km)",
    y = "Preschool Density (count per sq km)",
    title = "Preschool Density vs. Subzone Area"
  ) +
  theme_minimal()
```

## Results

### Data Summary

```{r summary-output, message=TRUE}
message("\n", strrep("=", 60), "\n")
message("DATA PROCESSING SUMMARY")
message(strrep("=", 60), "\n")

# Subzone Summary
message("1. SUBZONE DATA (clean_subzone.gpkg)")
message("   - Records: ", nrow(mpsz_clean))
message("   - CRS: EPSG:", st_crs(mpsz_clean)$epsg, " (SVY21)")
message("   - Geometry types: ", paste(unique(st_geometry_type(mpsz_clean)), collapse=", "))
message("   - Fields: ", paste(names(st_drop_geometry(mpsz_clean)), collapse=", "))

# Cycling Path Summary
message("\n2. CYCLING PATH DATA (clean_cycling_path.gpkg)")
message("   - Records: ", nrow(cycling_clean))
message("   - CRS: EPSG:", st_crs(cycling_clean)$epsg, " (SVY21)")
message("   - Geometry types: ", paste(unique(st_geometry_type(cycling_clean)), collapse=", "))
message("   - Fields: ", paste(names(st_drop_geometry(cycling_clean)), collapse=", "))

# Pre-Schools Summary
message("\n3. PRE-SCHOOLS DATA (clean_preschools_svy21.gpkg)")
message("   - Records: ", nrow(preschools_clean))
message("   - CRS: EPSG:", st_crs(preschools_clean)$epsg, " (SVY21)")
message("   - Geometry types: ", paste(unique(st_geometry_type(preschools_clean)), collapse=", "))
message("   - Fields: ", paste(names(st_drop_geometry(preschools_clean)), collapse=", "))

# Listings Summary
message("\n4. LISTINGS DATA (listings.csv - read only)")
message("   - Records: ", nrow(listings))
message("   - Latitude range: [", round(min(listings$latitude), 4), ", ", 
message("   - Latitude range: [", round(min(listings$latitude), 4), ", ",
        round(max(listings$latitude), 4), "]")
message("   - Longitude range: [", round(min(listings$longitude), 4), ", ", 
message("   - Longitude range: [", round(min(listings$longitude), 4), ", ",
        round(max(listings$longitude), 4), "]")

message("\n5. LISTINGS DATA (listings_sf - transformed)")
message("   - Records: ", nrow(listings_sf))
message("   - CRS: EPSG:", st_crs(listings_sf)$epsg)
message("   - Geometry type: ", unique(st_geometry_type(listings_sf)))

message("\n", strrep("=", 60))
message("✓ All data processing completed successfully!")
message(strrep("=", 60))
```

### Sample Data Preview

```{r preview-data}
# Preview first 5 records without geometry
message("\nSample records from cleaned datasets:")

message("\nSubzone (first 3 records):")
print(head(st_drop_geometry(mpsz_clean), 3))

message("\nCycling Path (first 3 records):")
print(head(st_drop_geometry(cycling_clean), 3))

message("\nPre-Schools (first 3 records):")
print(head(st_drop_geometry(preschools_clean), 3))
```

------------------------------------------------------------------------

*End of Hands-on Exercise 01a*